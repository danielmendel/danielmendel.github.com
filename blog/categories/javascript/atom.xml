<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | Useful Platitudes]]></title>
  <link href="http://danielmendel.github.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://danielmendel.github.com/"/>
  <updated>2013-03-04T12:42:58-05:00</updated>
  <id>http://danielmendel.github.com/</id>
  <author>
    <name><![CDATA[Daniel Mendel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dumbwaiter v0.0.1]]></title>
    <link href="http://danielmendel.github.com/blog/2013/03/04/dumbwaiter-v0-dot-0-1/"/>
    <updated>2013-03-04T12:27:00-05:00</updated>
    <id>http://danielmendel.github.com/blog/2013/03/04/dumbwaiter-v0-dot-0-1</id>
    <content type="html"><![CDATA[<p>I've recently found myself doing a lot of experiments in HTML that are only composed of client-side code.  The trick is that to properly test them, you have to serve the pages through a host of some kind -- anything that you open directly using the <code>file:</code> protocol runs into security measures that prevent the page access to certain types of assets and requests.</p>

<p>In the past I've either launched Chrome with <code>--allow-file-access-from-files</code> and used the <code>file:</code> protocol, or served the files through a local Apache or Nginx server.  Since I'm lazy, I decided these options were too much work and that instead I wanted a simple CLI to spin up small servers for any local directory.</p>

<p>This morning I wrote <a href="https://github.com/danielmendel/dumbwaiter"><code>dumbwaiter</code></a>, a <em>tiny</em>, 11 line <code>npm</code> module for doing just that by using the <code>connect.static</code> middleware.</p>

<p>``` javascript</p>

<h1>!/usr/bin/env node</h1>

<p>var connect  = require('connect')
  , path     = require('path')
  , dirPath  = path.resolve( process.argv[2] )
  , PORT     = process.argv[3] || 3000
  , server   = connect()</p>

<p>server.use( connect.static( dirPath ) )
server.listen( PORT )
console.log('serving ' + dirPath + ' on port ' + PORT + ' ...')
```</p>

<p>Install with <code>npm install -g dumbwaiter</code>, then run as <code>dumbwaiter [rootDir] [port]</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New compound animations in glitz.js]]></title>
    <link href="http://danielmendel.github.com/blog/2013/02/25/new-compound-animations-in-glitz-dot-js/"/>
    <updated>2013-02-25T17:46:00-05:00</updated>
    <id>http://danielmendel.github.com/blog/2013/02/25/new-compound-animations-in-glitz-dot-js</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/danielmendel/glitz.js"><code>glitz.js</code></a> support for defining animations is pretty flexible, but it is designed for fairly simple interactive behaviors and has, until now, lacked a good method for building complex animations from component parts.  I've wanted to add a good API for to do this for a while and this week I finally got a chance to do so, while pairing with <a href="https://github.com/zachallaun">Zach Allaun</a> at <a href="http://www.hackerschool.com">Hacker School</a>.  I'm really excited about what we came up.  First, I'll explain the state of affairs before our changes.</p>

<!-- more -->


<h2>Good, but not great</h2>

<p>The animation API that glitz implements is very straightforward, if you've ever animated <code>DOM</code> elements with <code>jQuery.animate</code> then the syntax should be pretty familiar.  All of the following animations are equivalent.</p>

<p><code>javascript
// transform ( duration defaults to 250ms )
box.animate({ x: 100 });
// transform, duration
box.animate({ x: 100 }, 5000 );
// transform, callback
box.animate({ x: 100 }, function(){ ... });
// transform, duration, callback
box.animate({ x: 100 }, 5000, function(){ ... });
// transform, options
box.animate({ x: 100 }, { duration: 5000, done: function(){ ... }});
</code>
If <code>animate</code> is invoked on an object while that object is still performing a previous animation, the current animation is immediately canceled and the new one begins.  This is the default behavior because interactivity requires an immediate response from objects.  If you want to build a complex series of animations, you can do so using nested callbacks.</p>

<p>``` javascript
// move left, then down, then fade the color
box.animate({ x: 100 }, 5000, function(){</p>

<pre><code>box.animate({ y: 100 }, 5000, function(){
    box.animate({ strokeColor: '#f00' }, 5000 );
})
</code></pre>

<p>})
```
As you can imagine, this gets to be pretty ugly pretty quickly if you want even fairly simple sets of actions.  Futhermore, it's difficult to store animation routines and run them more dynamically -- users would have to implement their own methodology which would, at the most simple, look something like this...</p>

<p>``` javascript
var anims = {</p>

<pre><code>left:    { x: 100 }
</code></pre>

<p>  , down:    { y: 100 }
  , turnRed: { strokeColor: '#f00' }
}
function run( series ){</p>

<pre><code>box.animate.call( box, anims[series.shift()], function(){ run( series ) } ) 
</code></pre>

<p>};
runSeries([ 'left', 'down', 'turnRed' ]);
```
Gross -- we figured we could definitely do better than that.</p>

<h2>Enter Compositions</h2>

<p>First we thought it would be good if you could compose a series of animations like this:</p>

<p><code>javascript
// move left, then down, then fade the color
box.animate([{ x: 100 }, { y: 100 }, { strokeColor: '#f00' }]);
</code>
This is already clearly better than the alternative, but then we decided we had to include support to create <em>parallel</em> animations as well, something that was not possible in any way shape or form before.</p>

<p><code>javascript
// move left and down simultaniously but with different end times
box.animate([[{ x: 100, duration: 500 }, { y: 50, duration: 1000 }]]);
</code>
By combining these you can compose a series of parallel animations:</p>

<p><code>javascript
box.animate([[{ x: 100 }, { y: 100 }],[{ x: 0 }, { strokeColor: '#f00' }]]);
</code>
Or parallel series:</p>

<p><code>javascript
box.animate([[[{ x: 100 }, { y: 100 }],[{ strokeColor: '#f00'}, { y: 0 }]]]);
</code>
Or any combination thereof:
<code>javascript
box.animate([{ x: 100 }, { y: 100 }, [{ y: 0 }, { strokeColor: '#f00' }, [{ x: 0 }, { strokeColor: '#0f0' }]]]);
</code>
That's it! You can <a href="https://github.com/danielmendel/glitz.js">fork glitz.js</a> and try them out for yourself.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cool stuff I learned doing code review]]></title>
    <link href="http://danielmendel.github.com/blog/2013/02/20/cool-stuff-i-learned-doing-code-review/"/>
    <updated>2013-02-20T16:27:00-05:00</updated>
    <id>http://danielmendel.github.com/blog/2013/02/20/cool-stuff-i-learned-doing-code-review</id>
    <content type="html"><![CDATA[<p>So a major staple of <a href="http://www.hackerschool.com">Hacker School</a> is doing ( and getting ) lots and lots of code reviews.  I think this is <em>awesome</em>, and I've been working on a lot of reviewing this week.  The most rewarding thing about reviewing a language you are comfortable in is that you learn all kinds of things you might never come across when left to your own ingrained design patterns.  This is a short round up of some neat things I learned about <code>javascript</code> this week.</p>

<!-- more -->


<h2>Not just syntax!</h2>

<p><code>javascript
function foo(){ return true };
var bar = function(){ return true };
</code>
I had always assumed that the only difference between these styles of defining a function was syntactic -- however, that's not true! There is actually a crucial difference at runtime.</p>

<p><code>javascript
foo();  // true
bar();  // ERROR! bar is not defined.
function foo(){ return true };
var bar = function(){ return true };
</code>
This is one of those things that now I know it, seems obvious.  The essential difference is that javascript loads all of the function definitions in a chunk of code before it begins execution.  When it encounters <code>foo()</code> it already has a reference to the function definition below.  However, <strong>the <code>bar</code> function is actually <em>anonymous</em> until the line assigning it to <code>bar</code> is executed</strong> -- because this is <em>after</em> the line that tries to run <code>bar()</code> the call fails.</p>

<p>-- with <a href="https://github.com/alliejones">Allie Jones</a></p>

<h2>Do While</h2>

<p>For some reason I have simply never really used javascript's <code>do {} while ()</code> loop.  I use <code>while(){}</code> style loops all the time and somehow in the back of my mind must have foolishly assumed that they were all I'd ever need for a <code>while</code> ( pun! ).  I was wrong, there are cases where this syntax is super useful, consider this essential difference between the two.</p>

<p>``` javascript
do{ var a = 1; }while( false );
while( false ){ var b = 1; };</p>

<p>a; // 1
b; // undefined
<code>``
**</code>do` always fires at least once.**  This makes it perfect for things like collision prevention without having to init a variable separately.</p>

<p><code>javascript
// assume uniqueRandoms === { ... };
do{ var a = Math.random() } while( uniqueRandoms.hasOwnProperty(a) )
</code></p>

<p>-- with <a href="https://github.com/wija">Bill Abresch</a></p>

<h2>Applied Math</h2>

<p>Somehow I had never considered the pure simple genius of this strategy.</p>

<p><code>javascript
var arr = [ 20, 124, 240, 12, 10, 2 ];
Math.max.apply( Math, arr );  // 240
</code></p>

<p>-- with <a href="https://github.com/greggreggreg7">Greg Altman</a> and <a href="https://github.com/patrickmestabrook">Patrick Estabrook</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Subclassing Javascript Arrays]]></title>
    <link href="http://danielmendel.github.com/blog/2013/02/20/subclassing-javascript-arrays/"/>
    <updated>2013-02-20T03:44:00-05:00</updated>
    <id>http://danielmendel.github.com/blog/2013/02/20/subclassing-javascript-arrays</id>
    <content type="html"><![CDATA[<p>When I started working on the animation framework <a href="https://github.com/danielmendel/glitz.js"><code>glitz.js</code></a>, I wanted an easy syntax for expressing and traversing a nested tree of <code>Renderable</code> objects.  I thought, "<em>Why not implement it as an array?</em>" Since the scene graph would need to be iterated over very quickly during the render loop, it would be great to just represent the whole thing as a multi-dimentional array -- <strong>essentially a subclass of array</strong> that had some additional properties and methods like <code>render</code> and <code>animate</code>.</p>

<p><code>javascript
var box1 = new Box({ x: 100, y: 100 });
var box2 = new Box({ x: 110, y: 110 });
box1.push( box2 );
box1[0];       // box2
box1.render(); // draws a box
</code></p>

<!-- more -->


<h2><a id="naive"></a> 1. Ah, Naïveté</h2>

<p>First I tried a simple approach.</p>

<p>``` javascript
var arrLike = { length: 0 };
arrLike.push = function(){</p>

<pre><code>Array.prototype.push.apply( this, arguments );
</code></pre>

<p>}
arrLike.push('foo');
arrLike<a href="https://github.com/danielmendel/glitz.js">0</a>   // 'foo'
arrLike.length // 1
<code>``
Basically, you can invoke methods from the native</code>Array.prototype` on any object with a length and get array-like results.  This works because <strong>javascript objects allow numerical keys</strong>, so essentially what we end up with is:</p>

<p>``` javascript
var arrLike = {</p>

<pre><code>0: 'foo'
</code></pre>

<p>  , length: 1
};
<code>``
At first glance (eg, not in</code>IE&lt;8`), this seems to work great. However, <strong>there are hidden dragons</strong> -- let's compare some further manipulations to a native array.</p>

<p>``` javascript
var arr = new Array('foo');
arr<a href="https://github.com/danielmendel/glitz.js">0</a>;         // 'foo'</p>

<p>arr.length     = 0;
arrLike.length = 0;
arr<a href="https://github.com/danielmendel/glitz.js">0</a>;         // undefined
arrLike<a href="https://github.com/danielmendel/glitz.js">0</a>      // 'foo'</p>

<p>arr<a href="http://perfectionkills.com/how-ecmascript-5-still-does-not-allow-to-subclass-an-array">10</a>     = 'bar';
arrLike<a href="http://perfectionkills.com/how-ecmascript-5-still-does-not-allow-to-subclass-an-array">10</a> = 'bar';
arr.length;     // 11
arrLike.length; // 0
<code>``
**Uh-oh**, there are obviously some drawbacks here.  First, **setting the length property of a proper</code>Array<code>to</code>0<code> clears the array**.  In fact, this is usually the [fastest method of clearing arrays][1].  Second, when you assign a value to an array index that is</code>> length<code>, then the native array will expand to contain it.  In short, **native arrays have a magical</code>length`** that we miss out on entirely with the naive approach.  As usual, more information can be found in the <a href="http://bclary.com/2004/11/07/#a-15.4">relevant section of the EMCAscript spec</a>.</p>

<h2><a id="extension"></a>2. Direct extension</h2>

<p>Okay, so my naive approach is dead in the water -- after grieving, I decided to try direct extension.  This is exactly what it sounds like: creating <code>Array</code> instances and copying a bunch of methods &amp; properties on to them directly.</p>

<p>``` javascript
var extension = {</p>

<pre><code>x: 0
</code></pre>

<p>  , y: 0
  , render: function(){ ... }
  // ...
};</p>

<p>var Box = function( instanceProps ){</p>

<pre><code>var arr = [], k;
for( k in extension ){
    if( extension.hasOwnProperty(k) )
        arr[k] = extension[k];
}
for( k in instanceProps ){
    if( instanceProps.hasOwnProperty(k) )
        arr[k] = instanceProps[k];
}
return arr;
</code></pre>

<p>};
```
The outcome here is exactly what we want -- a native array with some extra methods and properties.  There's just one problem, <strong>compared to creating raw instances of a native array, it is <em>really, really slow</em></strong> -- for example, in Firefox 17.0, <a href="http://jsperf.com/subclassing-arrays-direct-extension-variations/3">it is 26 x slower</a> when adding just two properties.</p>

<p>Now obviously there are a lot of use cases where this performance hit isn't particularly painful -- even at 1/26th speed you can still create many thousands of arrays per second, and probably most uses for <a href="https://github.com/danielmendel/glitz.js"><code>glitz.js</code></a> wouldn't suffer too badly here.  But, <strong>this is in an animation framework</strong> and if we can speed any part of it up by that much, it increases the domain it can operate in by a fair margin.  This brings us to...</p>

<h2><a id="subclassing"></a>3. Having your cake and eating it inside of an iframe</h2>

<p>Wouldn't it be the best if we could just subclass <code>Array</code> and add some methods to the <code>prototype</code>?  Of course this would contravine several of the golden rules of javascript best practices, first and foremost being <a href="http://www.nczonline.net/blog/2010/03/02/maintainable-javascript-dont-modify-objects-you-down-own/">don't modify objects you don't own</a>.  Another issue with this is that each user-defined <code>Renderable</code> subclass requires a different set of extentions to the <code>prototype</code> and <a href="http://perfectionkills.com/how-ecmascript-5-still-does-not-allow-to-subclass-an-array/#andrea_giammarchi_solution">trying to use prototypical inheritance</a> runs into the same issues as the <a href="#naive">naive solution</a>.</p>

<p>Enter Dean Edwards <a href="http://dean.edwards.name/weblog/2006/11/hooray/">iframe sandbox solution</a> -- the idea here is that you create a hidden <code>&lt;iframe&gt;</code> and steal the <code>Array</code> object from the <code>iframe</code> execution context.</p>

<p>``` javascript</p>

<p>var iframe = document.createElement("iframe");</p>

<pre><code>iframe.style.display = "none";
document.body.appendChild(iframe);
frames[frames.length - 1].document.write(
  "&lt;script&gt;parent.myArray = Array;&lt;/script&gt;"
);
</code></pre>

<p>myArray === Array // false
myArray.prototype.foo = 'bar';</p>

<p>var arr   = new Array(1,2,3);
var myarr = new myArray(1,2,3);</p>

<p>myarr.foo;        // 'bar'
arr.foo;          // undefined
```
This works because browsers sandbox the javascript execution environments so that each frame owns a unique set of native objects.  Here we simply "borrow" ( read: steal ) one from a new iframe and send it back to our execution environment.  As you might imagine, this technique comes with some caveats:</p>

<ul>
<li>Keep that iframe around and attached to the DOM -- it still technically owns our array.</li>
<li>This approach doesn't work in non-browser environments.</li>
</ul>


<p>Number 2 is not a problem this purpose as <a href="https://github.com/danielmendel/glitz.js"><code>glitz.js</code></a> is already tied to the browser in other ways.  Additionally, if it were ever to be ported to a server context this same methodology could be recreated with a slightly different technique, such as borrowing <code>Array</code> from a <code>VM</code> in <code>node.js</code>.</p>

<p>Ultimately this is the technique I used for a major update to the way that <a href="https://github.com/danielmendel/glitz.js"><code>glitz.js</code></a> handles array subclassing under the hood in commit <a href="https://github.com/danielmendel/glitz.js/commit/5c5d183c7cbcdd26d669b40270745c5fddb9b539#L3R656"><code>5c5d183</code></a> and also ended up putting together <a href="https://github.com/danielmendel/gimme"><code>gimme</code></a> a tiny stand alone library to automate the process of "borrowing" natives.</p>

<p>For the most comprehensive overview of the techniques for subclassing arrays in javascript, read <a href="http://perfectionkills.com/how-ecmascript-5-still-does-not-allow-to-subclass-an-array">How ECMAscript 5 still does not allow to subclass an array</a> [sic].</p>
]]></content>
  </entry>
  
</feed>
