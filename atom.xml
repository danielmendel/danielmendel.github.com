<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Useful Platitudes]]></title>
  <link href="http://danielmendel.github.com/atom.xml" rel="self"/>
  <link href="http://danielmendel.github.com/"/>
  <updated>2013-02-20T16:24:47-05:00</updated>
  <id>http://danielmendel.github.com/</id>
  <author>
    <name><![CDATA[Daniel Mendel Espeset]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Subclassing Javascript Arrays]]></title>
    <link href="http://danielmendel.github.com/blog/2013/02/20/subclassing-javascript-arrays/"/>
    <updated>2013-02-20T03:44:00-05:00</updated>
    <id>http://danielmendel.github.com/blog/2013/02/20/subclassing-javascript-arrays</id>
    <content type="html"><![CDATA[<p>When I started working on the animation framework <a href="https://github.com/danielmendel/glitz.js"><code>glitz.js</code></a>, I wanted an easy syntax for expressing and traversing a nested tree of <code>Renderable</code> objects.  I thought, &#8221;<em>Why not implement it as an array?</em>&#8221; Since the scene graph would need to be iterated over very quickly during the render loop, it would be great to just represent the whole thing as a multi-dimentional array &#8211; <strong>essentially a subclass of array</strong> that had some additional properties and methods like <code>render</code> and <code>animate</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">box1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Box</span><span class="p">({</span> <span class="nx">x</span><span class="o">:</span> <span class="mi">100</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="mi">100</span> <span class="p">});</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">box2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Box</span><span class="p">({</span> <span class="nx">x</span><span class="o">:</span> <span class="mi">110</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="mi">110</span> <span class="p">});</span>
</span><span class='line'><span class="nx">box1</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span> <span class="nx">box2</span> <span class="p">);</span>
</span><span class='line'><span class="nx">box1</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>       <span class="c1">// box2</span>
</span><span class='line'><span class="nx">box1</span><span class="p">.</span><span class="nx">render</span><span class="p">();</span> <span class="c1">// draws a box</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<h2><a id="naive"></a> 1. Ah, Naïveté</h2>

<p>First I tried a simple approach.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">arrLike</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">length</span><span class="o">:</span> <span class="mi">0</span> <span class="p">};</span>
</span><span class='line'><span class="nx">arrLike</span><span class="p">.</span><span class="nx">push</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">push</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span> <span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">arrLike</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">arrLike</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>   <span class="c1">// &#39;foo&#39;</span>
</span><span class='line'><span class="nx">arrLike</span><span class="p">.</span><span class="nx">length</span> <span class="c1">// 1</span>
</span></code></pre></td></tr></table></div></figure>


<p>Basically, you can invoke methods from the native <code>Array.prototype</code> on any object with a length and get array-like results.  This works because <strong>javascript objects allow numerical keys</strong>, so essentially what we end up with is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">arrLike</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="mi">0</span><span class="o">:</span> <span class="s1">&#39;foo&#39;</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">length</span><span class="o">:</span> <span class="mi">1</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>At first glance (eg, not in <code>IE&lt;8</code>), this seems to work great. However, <strong>there are hidden dragons</strong> &#8211; let&#8217;s compare some further manipulations to a native array.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>         <span class="c1">// &#39;foo&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span>     <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="nx">arrLike</span><span class="p">.</span><span class="nx">length</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="nx">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>         <span class="c1">// undefined</span>
</span><span class='line'><span class="nx">arrLike</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>      <span class="c1">// &#39;foo&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">arr</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span>     <span class="o">=</span> <span class="s1">&#39;bar&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">arrLike</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;bar&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>     <span class="c1">// 11</span>
</span><span class='line'><span class="nx">arrLike</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="c1">// 0</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Uh-oh</strong>, there are obviously some drawbacks here.  First, <strong>setting the length property of a proper <code>Array</code> to <code>0</code>  clears the array</strong>.  In fact, this is usually the <a href="http://jsperf.com/clearing-arrays-without-reassigning-them">fastest method of clearing arrays</a>.  Second, when you assign a value to an array index that is <code>&gt; length</code>, then the native array will expand to contain it.  In short, <strong>native arrays have a magical <code>length</code></strong> that we miss out on entirely with the naive approach.  As usual, more information can be found in the <a href="http://bclary.com/2004/11/07/#a-15.4">relevant section of the EMCAscript spec</a>.</p>

<h2><a id="extension"></a>2. Direct extension</h2>

<p>Okay, so my naive approach is dead in the water &#8211; after grieving, I decided to try direct extension.  This is exactly what it sounds like: creating <code>Array</code> instances and copying a bunch of methods &amp; properties on to them directly.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">extension</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">x</span><span class="o">:</span> <span class="mi">0</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="mi">0</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span> <span class="p">...</span> <span class="p">}</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">Box</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">instanceProps</span> <span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[],</span> <span class="nx">k</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span> <span class="nx">k</span> <span class="k">in</span> <span class="nx">extension</span> <span class="p">){</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span> <span class="nx">extension</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">k</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>          <span class="nx">arr</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span> <span class="o">=</span> <span class="nx">extension</span><span class="p">[</span><span class="nx">k</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span> <span class="nx">k</span> <span class="k">in</span> <span class="nx">instanceProps</span> <span class="p">){</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span> <span class="nx">instanceProps</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">k</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>          <span class="nx">arr</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span> <span class="o">=</span> <span class="nx">instanceProps</span><span class="p">[</span><span class="nx">k</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">arr</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>The outcome here is exactly what we want &#8211; a native array with some extra methods and properties.  There&#8217;s just one problem, <strong>compared to creating raw instances of a native array, it is <em>really, really slow</em></strong> &#8211; for example, in Firefox 17.0, <a href="http://jsperf.com/subclassing-arrays-direct-extension-variations/3">it is 26 x slower</a> when adding just two properties.</p>

<p>Now obviously there are a lot of use cases where this performance hit isn&#8217;t particularly painful &#8211; even at 1/26th speed you can still create many thousands of arrays per second, and probably most uses for <a href="https://github.com/danielmendel/glitz.js"><code>glitz.js</code></a> wouldn&#8217;t suffer too badly here.  But, <strong>this is in an animation framework</strong> and if we can speed any part of it up by that much, it increases the domain it can operate in by a fair margin.  This brings us to&#8230;</p>

<h2><a id="subclassing"></a>3. Having your cake and eating it inside of an iframe</h2>

<p>Wouldn&#8217;t it be the best if we could just subclass <code>Array</code> and add some methods to the <code>prototype</code>?  Of course this would contravine several of the golden rules of javascript best practices, first and foremost being <a href="http://www.nczonline.net/blog/2010/03/02/maintainable-javascript-dont-modify-objects-you-down-own/">don&#8217;t modify objects you don&#8217;t own</a>.  Another issue with this is that each user-defined <code>Renderable</code> subclass requires a different set of extentions to the <code>prototype</code> and <a href="http://perfectionkills.com/how-ecmascript-5-still-does-not-allow-to-subclass-an-array/#andrea_giammarchi_solution">trying to use prototypical inheritance</a> runs into the same issues as the <a href="#naive">naive solution</a>.</p>

<p>Enter Dean Edwards <a href="http://dean.edwards.name/weblog/2006/11/hooray/">iframe sandbox solution</a> &#8211; the idea here is that you create a hidden <code>&lt;iframe&gt;</code> and steal the <code>Array</code> object from the <code>iframe</code> execution context.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">iframe</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;iframe&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">iframe</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">display</span> <span class="o">=</span> <span class="s2">&quot;none&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">iframe</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">frames</span><span class="p">[</span><span class="nx">frames</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">].</span><span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span>
</span><span class='line'>      <span class="s2">&quot;&lt;script&gt;parent.myArray = Array;&lt;/script&gt;&quot;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">myArray</span> <span class="o">===</span> <span class="nb">Array</span> <span class="c1">// false</span>
</span><span class='line'><span class="nx">myArray</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="s1">&#39;bar&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">arr</span>   <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">myarr</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">myArray</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">myarr</span><span class="p">.</span><span class="nx">foo</span><span class="p">;</span>        <span class="c1">// &#39;bar&#39;</span>
</span><span class='line'><span class="nx">arr</span><span class="p">.</span><span class="nx">foo</span><span class="p">;</span>          <span class="c1">// undefined</span>
</span></code></pre></td></tr></table></div></figure>


<p>This works because browsers sandbox the javascript execution environments so that each frame owns a unique set of native objects.  Here we simply &#8220;borrow&#8221; ( read: steal ) one from a new iframe and send it back to our execution environment.  As you might imagine, this technique comes with some caveats:</p>

<ul>
<li>Keep that iframe around and attached to the DOM &#8211; it still technically owns our array.</li>
<li>This approach doesn&#8217;t work in non-browser environments.</li>
</ul>


<p>Number 2 is not a problem this purpose as <a href="https://github.com/danielmendel/glitz.js"><code>glitz.js</code></a> is already tied to the browser in other ways.  Additionally, if it were ever to be ported to a server context this same methodology could be recreated with a slightly different technique, such as borrowing <code>Array</code> from a <code>VM</code> in <code>node.js</code>.</p>

<p>Ultimately this is the technique I used for a major update to the way that <a href="https://github.com/danielmendel/glitz.js"><code>glitz.js</code></a> handles array subclassing under the hood in commit <a href="https://github.com/danielmendel/glitz.js/commit/5c5d183c7cbcdd26d669b40270745c5fddb9b539#L3R656"><code>5c5d183</code></a> and also ended up putting together <a href="https://github.com/danielmendel/gimme"><code>gimme</code></a> a tiny stand alone library to automate the process of &#8220;borrowing&#8221; natives.</p>

<p>For the most comprehensive overview of the techniques for subclassing arrays in javascript, read <a href="http://perfectionkills.com/how-ecmascript-5-still-does-not-allow-to-subclass-an-array">How ECMAscript 5 still does not allow to subclass an array</a> [sic].</p>
]]></content>
  </entry>
  
</feed>
