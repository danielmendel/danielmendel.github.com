<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Useful Platitudes]]></title>
  <link href="http://danielmendel.github.com/atom.xml" rel="self"/>
  <link href="http://danielmendel.github.com/"/>
  <updated>2013-04-08T18:41:52-04:00</updated>
  <id>http://danielmendel.github.com/</id>
  <author>
    <name><![CDATA[Daniel Mendel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Another Javascript Scope Gotcha]]></title>
    <link href="http://danielmendel.github.com/blog/2013/04/08/another-javascript-scope-gotcha/"/>
    <updated>2013-04-08T02:37:00-04:00</updated>
    <id>http://danielmendel.github.com/blog/2013/04/08/another-javascript-scope-gotcha</id>
    <content type="html"><![CDATA[<p>Consider this simple constructor:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Counter</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">count</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">a</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">b</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>It creates an object with a <code>count</code> method which increments a couple of private variables and then returns their sum.</p>

<p>Let&#8217;s create one and run <code>count</code> a few times:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">counterA</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Counter</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">counterA</span><span class="p">.</span><span class="nx">count</span><span class="p">();</span>
</span><span class='line'><span class="c1">// 2</span>
</span><span class='line'><span class="nx">counterA</span><span class="p">.</span><span class="nx">count</span><span class="p">();</span>
</span><span class='line'><span class="c1">// 4</span>
</span><span class='line'><span class="nx">counterA</span><span class="p">.</span><span class="nx">count</span><span class="p">();</span>
</span><span class='line'><span class="c1">// 6</span>
</span></code></pre></td></tr></table></div></figure>


<p>Great! It works just as expected.  Let&#8217;s create another one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">counterB</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Counter</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">counterB</span><span class="p">.</span><span class="nx">count</span><span class="p">();</span>
</span><span class='line'><span class="c1">// 5</span>
</span><span class='line'><span class="nx">counterB</span><span class="p">.</span><span class="nx">count</span><span class="p">();</span>
</span><span class='line'><span class="c1">// 7</span>
</span><span class='line'><span class="nx">counterB</span><span class="p">.</span><span class="nx">count</span><span class="p">();</span>
</span><span class='line'><span class="c1">// 9</span>
</span></code></pre></td></tr></table></div></figure>


<p>What the heck? That&#8217;s not what we expected to happen – remember when we created those private variables?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>var</code> keyword only applies to the first variable in a mass assignment expression, so <code>b</code> is a global! <strong>Don&#8217;t mix mass assignment and <code>var</code>.</strong></p>

<p><span style="font-size:0.7em">with <a href="https://github.com/thomasballinger">Thomas Ballinger</a></span></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Benchmarkers, beware the ephemeral port limit]]></title>
    <link href="http://danielmendel.github.com/blog/2013/04/07/benchmarkers-beware-the-ephemeral-port-limit/"/>
    <updated>2013-04-07T01:38:00-04:00</updated>
    <id>http://danielmendel.github.com/blog/2013/04/07/benchmarkers-beware-the-ephemeral-port-limit</id>
    <content type="html"><![CDATA[<p>If you&#8217;re benchmarking a web server using tools like <code>ab</code>, <code>weighttp</code> or <code>siege</code> you may encounter an issue that could skew your results – <strong>hanging the connection pool</strong>.  To illustrate this point, let&#8217;s look at a couple of benchmarks using <code>siege</code> on <code>OS X</code>:</p>

<!-- more -->


<p>The first makes a total of <strong>16,300</strong> requests:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Transactions:               16300 hits
</span><span class='line'>Availability:           100.00 %
</span><span class='line'>Elapsed time:            12.03 secs
</span><span class='line'>Data transferred:         0.09 MB
</span><span class='line'>Response time:                0.09 secs
</span><span class='line'>Transaction rate:      1350.79 trans/sec
</span><span class='line'>Throughput:               0.01 MB/sec
</span><span class='line'>Concurrency:            122.91
</span><span class='line'>Successful transactions:       16300
</span><span class='line'>Failed transactions:             0
</span><span class='line'>Longest transaction:          0.15
</span><span class='line'>Shortest transaction:         0.00</span></code></pre></td></tr></table></div></figure>


<p>The second makes a total of <strong>16,384</strong> requests:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Transactions:               16384 hits
</span><span class='line'>Availability:           100.00 %
</span><span class='line'>Elapsed time:            21.73 secs
</span><span class='line'>Data transferred:         0.09 MB
</span><span class='line'>Response time:                0.16 secs
</span><span class='line'>Transaction rate:       753.57 trans/sec
</span><span class='line'>Throughput:               0.00 MB/sec
</span><span class='line'>Concurrency:            121.28
</span><span class='line'>Successful transactions:       16384
</span><span class='line'>Failed transactions:             0
</span><span class='line'>Longest transaction:          4.65
</span><span class='line'>Shortest transaction:         0.00</span></code></pre></td></tr></table></div></figure>


<p>The second reports the server to be about <strong>50% slower</strong> than the first!</p>

<p>If the processes are monitored during the second test, both <code>siege</code> and the server process spin up to full capacity for an extended duration as one would expect, but at some point they become <strong>totally idle for about 15 seconds</strong> before kicking back into action to finish the test.</p>

<p><strong>What gives?</strong></p>

<h2>Ephemeral Port Range</h2>

<p>To understand what is happening, we have to look at how <code>TCP</code> connections are handled by the operating system.  Whenever a connection is made between a client and server, the system binds that connection to an <strong>ephemeral port</strong> – a set of ports specified at the high end of the valid port range.  This is how to reveal what the ephemeral port range is on your system:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; sysctl net.inet.ip.portrange.first net.inet.ip.portrange.last
</span><span class='line'>net.inet.ip.portrange.first: 49152
</span><span class='line'>net.inet.ip.portrange.last: 65535</span></code></pre></td></tr></table></div></figure>


<p>The total number of ephemeral ports available on <code>OS X</code> is <strong>16,383</strong> ( on Linux it is usually <strong>28,232</strong> – it is possible to <a href="http://stackoverflow.com/a/1217100/464772">increase the ephemeral port range on OSX</a> ).  You might think that this should be more than enough to run our benchmarks since we have only <strong>125 simultanious connections</strong> occuring at any given time.  However, when one of these ports is closed <strong>it does not become immediately available</strong> for a new request.</p>

<h2>TCP Connection States</h2>

<p>During the lifetime of a request, each port goes through a series of states, from <code>SYN_SENT</code> when establishing a connection to <code>ESTABLISHED</code> when communication is actively happening, through a series of closing states eventually culminating in <code>TIME_WAIT</code> after the port has been closed.</p>

<p>During <code>TIME_WAIT</code> the port is held in limbo to ensure any remaining packets are not erroniously provided to a fresh connection.  ( Check the current state of ports in use by running <code>netstat -p tcp</code>, get a full overview of the states in the <code>man netstat</code> text )</p>

<p>The duration of the <code>TIME_WAIT</code> state is the <strong>Maximum Segment Lifetime</strong> and is defined in <code>net.inet.tcp.msl</code>.  We can check what it is:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; sysctl net.inet.tcp.msl
</span><span class='line'>net.inet.tcp.msl: 15000</span></code></pre></td></tr></table></div></figure>


<p>15 seconds.  <strong>Bingo!</strong> There&#8217;s the slowdown we&#8217;ve had skewing our results.</p>

<p>Note that this limitation does not affect real-world requests to a live server because each <code>TCP</code> connection is defined by the tuple of <code>source IP</code>, <code>source port</code>, <code>destination IP</code> and <code>destination port</code> – so the ephemeral port limit <strong>only applies to a single client / server pair</strong>.</p>

<p>It&#8217;s possible to reconfigure your kernel to allow a lot more requests, see Richard Jones&#8217;s <a href="http://www.metabrew.com/article/a-million-user-comet-application-with-mochiweb-part-1">A Million User Comet Application with Mochiweb Part I</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[All of the Markups]]></title>
    <link href="http://danielmendel.github.com/blog/2013/04/02/all-of-the-markups/"/>
    <updated>2013-04-02T16:59:00-04:00</updated>
    <id>http://danielmendel.github.com/blog/2013/04/02/all-of-the-markups</id>
    <content type="html"><![CDATA[<p>I recently started taking steps to revive <a href="https://github.com/danielmendel/enml.js">ENML.js</a>, a library I wrote a few years ago for defining and parsing <strong>Domain Specfic Markup Languages</strong>.  Since I wrote the first version of <strong>ENML</strong> in Ruby several years ago, some significant other <strong>ENML</strong> &#8216;s have popped up – most notably the <a href="http://dev.evernote.com/start/core/enml.php">Evernote Markup Language</a>.  Obviously, I need to find a new name for the project.  After some cursory googling for other possible <code>__ML</code> names I came to the realization that <strong>there are a buttload of Markup Languages in the world</strong>.</p>

<p>I decided – as any sane programmer in my position would – to spend the next several hours writing a scraper to compile a list of them all.  I sat down with <a href="https://github.com/thomasballinger">Thomas Ballinger</a> and did just that. Without futher ado, I am proud to present our findings:</p>

<!-- more -->


<h2>The list</h2>

<p><span style="font-size:0.8em">Entries marked with <code>*</code> appear to be widely used (we found a lot of references to them).<br />Scroll down to find the <code>__ML</code> names that are still available.<br />This list clearly has some false positives, feel free to <a href="https://github.com/danielmendel/danielmendel.github.com">make a pull request</a> if you want to clean them up :)</span></p>

<pre><code>AAML
===============
Attendant Markup Language
Another Android Markup Language
Automated Avatar Markup Language
Affective Animation Markup Language
Avatar Annotation Markup Language
Active Audio Markup Language
Advanced Audio Markup Language


ABML
===============
* Address Book Markup Language

ACML
===============
Ansi C Markup Language
Agent Communication Markup Language
Athematical Markup Language
Application Configuration Markup Language

ADML
===============
* Architecture Description Markup Language
Application Description Markup Language

AEML
===============
Astronomical Event Markup Language
Action Engine Markup Language
Assertion Markup Language

AFML
===============
Architectural Floorplan Markup Language
* Avatar Face Markup Language

AGML
===============
* Annotated Gel Markup Language

AHML
===============
Angband Help Markup Language

AIML
===============
* Artificial Intelligence Markup Language
Ai Markup Language

AKML
===============
Audiomath Knowledge Markup Language

ALML
===============
Another Lightweight Markup Language
Abstract Layout Markup Language
Application Logic Markup Language
Al Markup Language

AMML
===============
Aml Markup Language
Attention Measurement Markup Language
Adaptive Multimedia Markup Language

ANML
===============
* And Notification Markup Language
Annotated Markup Language
Anotated Markup Language
Arning Markup Language
Another Markup Language

AOML
===============
* Astronomical Observation Markup Language
Anarchy Online Markup Language
Astronomical Object Markup Language

APML
===============
Attention Profiling Markup Language
Attention Profile Markup Language

ARML
===============
* Augmented Reality Markup Language
Atform Markup Language

ASML
===============
* Automatic Site Markup Language
Astronomical Markup Language
Alternate Scripting Markup Language

ATML
===============
* Automatic Test Markup Language

AVML
===============
* Antivirus Markup Language
Active Video Markup Language

AZML
===============
Az Markup Language

BAML
===============
* Binary Application Markup Language
Ble Application Markup Language

BBML
===============
* Bulletin Board Markup Language

BCML
===============
* Biological Connection Markup Language
Batch Control Markup Language
Biological Collection Markup Language
Bored Child Markup Language

BDML
===============
* Biophysical Description Markup Language
Business Decision Markup Language
Bank Definition Markup Language
Based Markup Language
Beam Data Markup Language

BEML
===============
* Brightcove Experience Markup Language
Brightcove Markup Language
Beml Markup Language

BGML
===============
* Board Game Markup Language
Basisplus Generalised Markup Language
Basis Generalized Markup Language

BHML
===============
Bml Html Markup Language

BIML
===============
* Business Intelligence Markup Language

BKML
===============
* Burger King Markup Language

BLML
===============
* Business Letter Markup Language
Blinkenlights Markup Language
* Blinkenlightsmarkuplanguage
Bruce Lee Markup Language

BMML
===============
* Braille Music Markup Language
Balsamiq Mockups Markup Language

BNML
===============
* Business Narrative Markup Language
Bpmn Markup Language

BPML
===============
Business Process Markup Language

BRML
===============
* Business Rules Markup Language

BSML
===============
* Bioinformatic Sequence Markup Language
Bioinformatics Sequence Markup Language
Binding Schema Markup Language
Bullshit Markup Language

BUML
===============
* Buml Markup Language
* Basic Units Markup Language

BVML
===============
* Biological Variation Markup Language

BWML
===============
Bridgeworks Markup Language

CAML
===============
* Collaborative Application Markup Language
Camera Markup Language
Collaborativeapplicationmarkuplanguage

CBML
===============
* Case Based Markup Language
* Comic Book Markup Language

CDML
===============
* Claris Dynamic Markup Language
Climate Data Markup Language

CEML
===============
Computational Electromagnetic Markup Language
Coordinated Event Markup Language
Cated Markup Language
Control Elements Markup Language

CFML
===============
* Coldfusion Markup Language

CGML
===============
Common Ground Markup Language
Code Generation Markup Language
* Compact Geographic Markup Language

CHML
===============
Cultural Heritage Markup Language

CIML
===============
* Customer Identity Markup Language
* Computer Investigation Markup Language

CLML
===============
Crown Legilsation Markup Language
* Crown Legislation Markup Language
Common Logic Markup Language

CMML
===============
* Continuous Media Markup Language

CNML
===============
* Community Network Markup Language
Chinese News Markup Language
* Community Networking Markup Language
Community Networks Markup Language

COML
===============
Component Markup Language
* Canopen Markup Language
Coffescript Markup Language

CPML
===============
* Call Policy Markup Language
Call Processing Markup Language
Command Procedure Markup Language

CQML
===============
Common Query Markup Language
Chical Qos Markup Language

CRML
===============
* Content Request Markup Language
Conflict Resolution Markup Language

CSML
===============
* Cell System Markup Language
* Conceptual Space Markup Language
Cave Survey Markup Language

CTML
===============
Current Markup Language

CVML
===============
* Computer Vision Markup Language
Caviar Video Markup Language
Common Vulnerability Markup Language

CWML
===============
* Cyclone Warning Markup Language
* Compact Wireless Markup Language

CXML
===============
Cumentation Xml Markup Language

DAML
===============
* Darpa Agent Markup Language

DBML
===============
* Database Markup Language

DCML
===============
* Data Center Markup Language

DDML
===============
* Document Definition Markup Language
Data Display Markup Language

DEML
===============
* Digital Evidence Markup Language
Demographic Markup Language
Device Markup Language

DFML
===============
Dwarf Fortress Markup Language
* Dynamic File Markup Language

DGML
===============
* Directed Graph Markup Language

DHML
===============
Dhml Markup Language

DIML
===============
* Data Injection Markup Language
* Dissertation Markup Language

DJML
===============
* Dow Jones Markup Language

DKML
===============
* Device Kit Markup Language
Devicekit Markup Language

DLML
===============
* Description Logics Markup Language
* Description Logic Markup Language
Dynamic Layout Markup Language

DMML
===============
* Dialogue Moves Markup Language
Data Matching Markup Language
Dialog Moves Markup Language

DNML
===============
* Digital Novel Markup Language

DOML
===============
D Other Markup Language

DPML
===============
* Digital Photogrammetry Markup Language
* Declarative Process Markup Language
Declarative Processing Markup Language

DQML
===============
D Query Markup Language

DRML
===============
D Report Markup Language
* Design Rule Markup Language
Dramatic Markup Language
D Reporting Markup Language

DSML
===============
* Directory Services Markup Language
Directory Service Markup Language

DTML
===============
* Document Template Markup Language

DUML
===============
* Document Update Markup Language

DVML
===============
* Distributed Voice Markup Language
Datum Validation Markup Language

DWML
===============
* Digital Weather Markup Language
Dynamic Web Markup Language

DXML
===============
Documentation Xml Markup Language

DZML
===============
Datazoomer Markup Language

EAML
===============
Email Markup Language
Eneralized Markup Language

EBML
===============
* Extensible Binary Markup Language
Extensible Markup Language
Extended Binary Markup Language

ECML
===============
Electronic Commerce Markup Language
Elgg Customizable Markup Language
Epicollect Markup Language
Embedded Component Markup Language

EDML
===============
Entity Definition Markup Language
* Electronic Data Markup Language
Extended Datamanagement Markup Language
Event Definition Markup Language
Extension Data Markup Language
Energy Distribution Markup Language
Elastic Deployment Markup Language

EEML
===============
* Extended Environments Markup Language
Escalator Elevator Markup Language

EFML
===============
* Eventfinder Markup Language

EGML
===============
* Evolving Graph Markup Language

EHML
===============
Extensible Hypertext Markup Language

EIML
===============
* Education Information Markup Language
Erial Markup Language
Extensible Markup Language

EJML
===============
Electronic Journal Markup Language

EKML
===============
* Ektron Markup Language

ELML
===============
* Elesson Markup Language

EMML
===============
* Enterprise Mashup Markup Language

ENML
===============
* Enotarization Markup Language
* Evernote Markup Language

EOML
===============
Extensible Object Markup Language
Engineering Ontology Markup Language

EPML
===============
* Epc Markup Language

EQML
===============
* Electronic Questionnaire Markup Language

ERML
===============
* Erlang Markup Language
Earth Resource Markup Language
Executable Rule Markup Language
* Extensible Rights Markup Language

ESML
===============
* Earth Science Markup Language
Earth Sciences Markup Language

ETML
===============
Er Text Markup Language
E Term Markup Language
Erent Markup Language
* Ertext Markup Language
Ent Markup Language

EVML
===============
* E Vector Markup Language
El Vector Markup Language

EWML
===============
Easyweb Markup Language
Easy Web Markup Language

EXML
===============
* Extensible Markup Language
Entation Xml Markup Language

FAML
===============
Family Markup Language

FBML
===============
* Facebook Markup Language

FCML
===============
* Facility Control Markup Language
Fantastic Contraption Markup Language
Flow Cytometry Markup Language

FDML
===============
Flow Description Markup Language
Field Data Markup Language
Filemaker Dynamic Markup Language
Farleden Dynamic Markup Language
* Flow Definition Markup Language
Forms Definition Markup Language

FEML
===============
* Facial Expression Markup Language
Flexible Markup Language

FFML
===============
* Force Field Markup Language
Forcefield Markup Language
French Fry Markup Language

FGML
===============
* Fenggui Markup Language

FHML
===============
For Hypertext Markup Language

FLML
===============
* Film Markup Language
Fluidity Markup Language

FMML
===============
Fbml Markup Language

FOML
===============
Format Objects Markup Language
Formatting Objects Markup Language
Flight Operations Markup Language
Formula Markup Language

FPML
===============
* Financial Products Markup Language

FQML
===============
Freetest Question Markup Language

FRML
===============
First Retail Markup Language
File Replication Markup Language
Financial Reporting Markup Language

FSML
===============
* Financial Services Markup Language
* Fusion Simulation Markup Language
* File Structure Markup Language

FTML
===============
Fferent Markup Language

FXML
===============
F Xml Markup Language

GAML
===============
* Game Markup Language
* Generalized Analytical Markup Language
General Analytical Markup Language

GCML
===============
General Caption Markup Language
Geographical Content Markup Language
Genetic Code Markup Language
Geometric Constraints Markup Language
Geometry Construction Markup Language
General Configuration Markup Language
Geographic Content Markup Language

GDML
===============
* Geometry Description Markup Language
Geometry Descripton Markup Language

GEML
===============
* Gene Expression Markup Language

GFML
===============
* Gene Fusion Markup Language
* Genetic Fuzzy Markup Language

GGML
===============
Guide Grinder Markup Language

GHML
===============
* Gas Hydrate Markup Language
Gas Hydrates Markup Language

GIML
===============
* Gastro Intestinal Markup Language
Guided Instruction Markup Language
Game Interface Markup Language
Generalized Interface Markup Language

GLML
===============
* Generative Lexicon Markup Language
Grid Logging Markup Language

GMML
===============
* Google Maps Markup Language
Genetic Mapdata Markup Language
Geographical Mobile Markup Language
General Mosaic Markup Language

GNML
===============
* Generic Neural Markup Language
Goal Net Markup Language

GOML
===============
* General Ontological Markup Language

GPML
===============
* Genmapp Pathway Markup Language
* Gplates Markup Language

GQML
===============
Generalized Questionnaire Markup Language
* General Questionnaire Markup Language

GRML
===============
* General Reuse Markup Language
Gordonrhodes Markup Language
Grml Markup Language

GSML
===============
* Ground Station Markup Language
Gigya Socialize Markup Language
* Grid Service Markup Language
Geological Science Markup Language
Geology Science Markup Language
Geca Scenario Markup Language

GUML
===============
Gc Uncertainty Markup Language

GVML
===============
Global Vulnerability Markup Language

GWML
===============
Ground Water Markup Language
* Groundwater Markup Language

GYML
===============
Geography Markup Language

HAML
===============
* Html Abstraction Markup Language
Haml Markup Language

HEML
===============
He Markup Language
* Hypertext Markup Language

HHML
===============
Html Hypertext Markup Language
He Hypertext Markup Language

HIML
===============
Hat Is Markup Language

HKML
===============
Hot Keys Markup Language

HLML
===============
Html Markup Language

HMML
===============
Html Markup Language

HPML
===============
* Hypertext Markup Language

HQML
===============
* Hierarchical Qos Markup Language

HRML
===============
* Hypertext Markup Language

HSML
===============
Hubspot Markup Language
Hot Spot Markup Language
Hsml Markup Language
Healthspace Markup Language

HTML
===============
Hyper Text Markup Language
He Term Markup Language
* Hypertext Markup Language

HUML
===============
Human Markup Language
Huml Markup Language

HWML
===============
Hand Written Markup Language

HXML
===============
* Hypertext Markup Language
Hxml Markup Language

HYML
===============
* Hypertext Markup Language

IAML
===============
* Interpreted Application Markup Language
Information Assurance Markup Language
Information Architecture Markup Language

IBML
===============
Ible Markup Language
Ibm Markup Language

ICML
===============
* Instrument Control Markup Language
Incopy Markup Language
Ialized Content Markup Language
Ic Markup Language
* Intelligence Community Markup Language

IDML
===============
* International Development Markup Language
* Indesign Markup Language
Identity Markup Language
Identification Markup Language

IEML
===============
Internet Explorer Markup Language

IFML
===============
* Interactive Fiction Markup Language

IGML
===============
* Implementation Guideline Markup Language

IHML
===============
Interconnected Hyperlink Markup Language

IIML
===============
* Interactive Image Markup Language

IKML
===============
Iknowledge Markup Language

ILML
===============
Ible Markup Language

IMML
===============
* Immersive Media Markup Language
Intermapper Markup Language
Instant Messaging Markup Language

INML
===============
Intuitive Markup Language
Inml Markup Language
Inline Markup Language

IOML
===============
* Interactive Outline Markup Language
Interactive Outlining Markup Language

IPML
===============
Input Markup Language
Input Processing Markup Language
Interactive Play Markup Language

IQML
===============
* Intelligent Questionnaire Markup Language

IRML
===============
Intermediary Rule Markup Language
* Investment Research Markup Language
Inventory Record Markup Language

ISML
===============
* Intershop Markup Language
Incredibily Strange Markup Language
Intactive Systems Markup Language
Internet Survey Markup Language

ITML
===============
Ifferent Markup Language

IUML
===============
Integrated Unified Markup Language
Iuml Markup Language
Intermediate Unified Markup Language

IVML
===============
* Intuvision Markup Language
Ivend Markup Language

IWML
===============
Interwiki Markup Language
* Inter Wiki Markup Language
Interworking Markup Language

IXML
===============
Ion Xml Markup Language

JAML
===============
* Java Application Markup Language
* Java Aspect Markup Language
Just Another Markup Language

JBML
===============
Jackbe Markup Language
Jbml Markup Language
James Bond Markup Language
Jeff Blums Markup Language

JCML
===============
Java Code Markup Language
* Job Control Markup Language

JDML
===============
* Job Description Markup Language

JEML
===============
Java Enhanced Markup Language
Java Easy Markup Language

JGML
===============
Java Graphics Markup Language
* Jinigrid Markup Language

JHML
===============
Java Hypertext Markup Language

JMML
===============
Jackbe Mashup Markup Language

JPML
===============
* Java Programming Markup Language

JQML
===============
Jquery Markup Language

JSML
===============
* Java Speech Markup Language
* Jspeech Markup Language
Javatm Speech Markup Language

JUML
===============
Jump Markup Language

JWML
===============
Java Widget Markup Language

JZML
===============
Jazzmutant Markup Language

KBML
===============
* Koala Bean Markup Language
Knowledge Base Markup Language

KDML
===============
* Kinetic Data Markup Language
Knowledge Database Markup Language

KFML
===============
Karst Features Markup Language
Kung Fooey Markup Language

KGML
===============
* Kegg Markup Language

KHML
===============
Keyhole Markup Language

KLML
===============
* Keyhole Markup Language
Knowledge Markup Language

KMML
===============
Kana Message Markup Language
Knowledge Management Markup Language
Knowledge Modeling Markup Language

KOML
===============
Komal Markup Language

KPML
===============
* Keypad Markup Language
Key Press Markup Language

KQML
===============
Knowledge Query Markup Language

KRML
===============
* Knowledge Representation Markup Language

KSML
===============
Keystone Markup Language

KWML
===============
Knowledge Web Markup Language

LAML
===============
Lication Markup Language
* Lisp Abstracted Markup Language

LBML
===============
Learner Behavior Markup Language

LCML
===============
* Legacy Computing Markup Language
* Library Catalog Markup Language

LDML
===============
* Locale Data Markup Language

LEML
===============
* Le Markup Language

LGML
===============
* Linguistics Markup Language

LIML
===============
Library Interface Markup Language
Limited Markup Language
Library Interaction Markup Language
Lized Markup Language

LJML
===============
Livejournal Markup Language

LKML
===============
* Lexical Knowledge Markup Language

LMML
===============
* Learning Material Markup Language

LNML
===============
Lon Markup Language
* Liner Notes Markup Language

LOML
===============
* Learning Object Markup Language

LPML
===============
Literate Programming Markup Language
* Linux Packaging Markup Language
Logical Partition Markup Language

LRML
===============
* Lire Report Markup Language
Le Rule Markup Language

LSML
===============
* Lightswitch Markup Language
Liveserver Markup Language
Levelseas Markup Language

LVML
===============
* Legislative Voting Markup Language
Layered Video Markup Language
Less Verbose Markup Language

LWML
===============
* Lightweight Markup Language
Light Weight Markup Language

LYML
===============
Lity Markup Language

MAML
===============
* Microsoft Assistance Markup Language
* Microarray Markup Language

MBML
===============
Matlab Markup Language
Map Builder Markup Language
Metabasic Markup Language

MCML
===============
* Media Center Markup Language
Mediacentermarkuplanguage
Mediacenter Markup Language

MDML
===============
* Market Data Markup Language
Markdown Markup Language
Model Document Markup Language

MEML
===============
* Mathematics Education Markup Language

MFML
===============
Microformats Markup Language
Moo Formatting Markup Language
Microformat Markup Language
Macromedia Flash Markup Language
Marketfeed Markup Language
Macromedia Flex Markup Language

MGML
===============
* Minimal Generalized Markup Language

MHML
===============
* Messaging Hypertext Markup Language
Modular Hypertext Markup Language
Modern House Markup Language

MIML
===============
* Maritime Information Markup Language
Manuscript Images Markup Language
Mation Markup Language
Multimodal Interaction Markup Language

MKML
===============
Merly Keyhole Markup Language

MLML
===============
* Meta Language Markup Language
Machine Learning Markup Language
Markup Language Markup Language

MNML
===============
* Musical Notation Markup Language
Music Notation Markup Language
Mathnews Markup Language

MOML
===============
Media Objects Markup Language
* Modeling Markup Language
* Media Object Markup Language

MPML
===============
* Multimodal Presentation Markup Language
Modal Presentation Markup Language

MQML
===============
* Message Queuing Markup Language

MRML
===============
* Mind Reading Markup Language
Multimedia Retrieval Markup Language
Minecraft Redstone Markup Language

MSML
===============
* Media Server Markup Language
Maritime Safety Markup Language

MVML
===============
* Media Vocabulary Markup Language
Math Viewer Markup Language
Multimedia Vocabulary Markup Language
Multivox Markup Language

MWML
===============
Moinmoin Wiki Markup Language
Motivewave Markup Language
* Mitsweb Markup Language
Mobile Web Markup Language

MZML
===============
Mz Markup Language

NAML
===============
* Nabble Application Markup Language
Naml Markup Language
* Nd Address Markup Language

NBML
===============
Netbricks Markup Language
Not Bunk Markup Language
Notebook Markup Language
Nsible Markup Language

NCML
===============
* Netcdf Markup Language

NDML
===============
* Network Design Markup Language
* Numerical Data Markup Language

NEML
===============
Near Eastern Markup Language
Near East Markup Language
Novah Export Markup Language
Neredbojias Emotion Markup Language
Nemui Extensible Markup Language

NHML
===============
Neuromorphic Hardware Markup Language
Network Hint Markup Language

NIML
===============
Nalytical Information Markup Language
Neuroimaging Markup Language
Nimal Markup Language

NKML
===============
Nursing Knowledge Markup Language

NLML
===============
* Natural Language Markup Language
Nlml Markup Language

NMML
===============
Network Management Markup Language
Neuromorphic Markup Language
Network Modeling Markup Language

NNML
===============
* Neural Network Markup Language
Neural Net Markup Language

NOML
===============
Ngo Markup Language
Normal Markup Language

NPML
===============
* Netpriva Markup Language

NQML
===============
* Natural Query Markup Language

NRML
===============
Natural Resources Markup Language
Nursery Rhyme Markup Language

NSML
===============
* News Story Markup Language
* News Markup Language

NTML
===============
Nt Markup Language

NUML
===============
* Numerical Markup Language

NVML
===============
* Navigation Markup Language

NWML
===============
News Markup Language

NXML
===============
Ntation Xml Markup Language
N Xml Markup Language

OAML
===============
Openavatar Markup Language
Orenge Analysis Markup Language
Ographic Markup Language

OBML
===============
* Opera Binary Markup Language

OCML
===============
Ocumentation Markup Language

ODML
===============
Odml Markup Language

OEML
===============
* Open Events Markup Language
Ostores Markup Language

OFML
===============
* Open Forms Markup Language
Open Form Markup Language

OGML
===============
* Open Graph Markup Language
Ography Markup Language

OHML
===============
Obfuscated Hypertext Markup Language

OIML
===============
Open Invoice Markup Language

OLML
===============
Open Lexicon Markup Language
Ole Markup Language
Observation Log Markup Language

OMML
===============
* Office Math Markup Language

ONML
===============
* Online Markup Language

OOML
===============
* Object Oriented Markup Language
Orenge Object Markup Language
Open Office Markup Language

OPML
===============
* Outline Processor Markup Language

OQML
===============
Oracle Question Markup Language

ORML
===============
* Optimization Reporting Markup Language
Operations Research Markup Language

OSML
===============
* Opensocial Markup Language
* Open Simple Markup Language
Omic Space Markup Language
Optical Spectroscopy Markup Language

OTML
===============
* Offline Tagging Markup Language

OVML
===============
* Ovidentia Markup Language
* Open Video Markup Language

OWML
===============
Own Markup Language
Openwack Markup Language

OXML
===============
Of Xml Markup Language
Ocumentation Xml Markup Language
O Xml Markup Language

PAML
===============
* Palm Markup Language
Proprietary Markup Language

PBML
===============
Purebasic Markup Language
Plasma Book Markup Language

PCML
===============
* Program Call Markup Language
Programme Call Markup Language

PDML
===============
* Packet Details Markup Language
Portable Document Markup Language
* Product Data Markup Language
* Panel Definition Markup Language

PEML
===============
* Prompt Engine Markup Language
* Php Extensible Markup Language

PFML
===============
Property Feed Markup Language
* Priority Fidelity Markup Language
Paid For Markup Language

PGML
===============
* Precision Graphics Markup Language

PHML
===============
Physiological Hierarchy Markup Language
Php Haml Markup Language
Philosophy Markup Language

PIML
===============
* Pathogen Information Markup Language

PKML
===============
* Peachy Keen Markup Language
Product Knowledge Markup Language

PLML
===============
* Pattern Language Markup Language

PMML
===============
* Predictive Model Markup Language
Predictive Modelling Markup Language

PNML
===============
* Petri Net Markup Language

POML
===============
Proprietary Markup Language

PPML
===============
* Personalized Print Markup Language
Personalized Page Markup Language

PQML
===============
Pretend Quiz Markup Language
Process Quality Markup Language

PRML
===============
* Proofreading Markup Language
Proofreadingmarkuplanguage
* Privacy Rights Markup Language

PSML
===============
* Portal Structure Markup Language
Pmsl Markup Language

PTML
===============
Per Text Markup Language
* Pertext Markup Language

PVML
===============
Photovoltaic Markup Language
Precision Vector Markup Language
Personajes Virtuales Markup Language

PWML
===============
* Print Wizard Markup Language
Printwizard Markup Language

PYML
===============
* Python Markup Language

QCML
===============
Quality Control Markup Language
Qualitative Coding Markup Language

QDML
===============
* Quick Data Markup Language
Quick Document Markup Language
Qualitative Data Markup Language

QFML
===============
Qfml Markup Language

QJML
===============
* Quick Java Markup Language
Qjml Markup Language

QKML
===============
Question Knowledge Markup Language

QMML
===============
* Question Mark Markup Language

QPML
===============
Quick Prototyping Markup Language
Quick Prototype Markup Language

QRML
===============
* Query Response Markup Language

QXML
===============
* Quarkxpress Markup Language
Quark Xpress Markup Language

RAML
===============
Relational Algebra Markup Language
* Reader Application Markup Language

RBML
===============
* Ruby Markup Language
Rule Base Markup Language
Rule Based Markup Language

RCML
===============
* Rich Client Markup Language
Revision Controller Markup Language
Rcml Markup Language
Rulecore Markup Language

RDML
===============
* R Data Markup Language
* Reusable Data Markup Language
* Route Data Markup Language

REML
===============
* Recipe Exchange Markup Language
Recipe Markup Language
Rock Engineering Markup Language

RFML
===============
* Record Format Markup Language

RGML
===============
* Requirements Generation Markup Language

RIML
===============
Rendering Independent Markup Language
* Rule Identification Markup Language
Reduced Instruction Markup Language
Renderer Independent Markup Language

RKML
===============
Rmerly Keyhole Markup Language

RLML
===============
Roguelike Markup Language
* Real Life Markup Language

RMML
===============
* Reusable Macro Markup Language
Rich Multimedia Markup Language

RNML
===============
Rent Markup Language

ROML
===============
Reference Object Markup Language
Roblox Markup Language

RPML
===============
* Resource Profiles Markup Language
Resource Physical Markup Language
Route Planning Markup Language
Route Plan Markup Language

RQML
===============
* Requirements Markup Language

RRML
===============
Restaurant Review Markup Language
Riented Rule Markup Language

RSML
===============
* Rule Structure Markup Language
Reference Semantic Markup Language

RTML
===============
* Remote Telescope Markup Language
Robot Transaction Markup Language

RVML
===============
* Rich Vector Markup Language
Richard Vogtmann Markup Language

RWML
===============
* Road Web Markup Language
Real World Markup Language

SAML
===============
* Security Assertion Markup Language

SBML
===============
* Systems Biology Markup Language

SCML
===============
Source Code Markup Language
Scribe Markup Language
Scenario Markup Language
* Service Creation Markup Language
Shopping Cart Markup Language
Shortcode Markup Language
Supply Chain Markup Language

SDML
===============
* Signed Document Markup Language
* Simplified Data Markup Language

SEML
===============
* Sible Markup Language
Scientific Experiment Markup Language
Structured Export Markup Language

SFML
===============
* Screening Form Markup Language
* Simple Form Markup Language
Starfleet Markup Language

SGML
===============
* Standard Generalized Markup Language
Standardized Generalized Markup Language
Sgml Markup Language

SHML
===============
* Structured Health Markup Language
Structured Hypertext Markup Language
Shml Markup Language

SIML
===============
* Simple Markup Language

SKML
===============
Skml Markup Language
Simple Knowledge Markup Language

SLML
===============
Subcellular Location Markup Language
Simple Logic Markup Language
* Structured Learning Markup Language
Securities Lending Markup Language

SMML
===============
* Simple Map Markup Language
Simulation Modular Markup Language
Securities Market Markup Language
Short Message Markup Language
Software Metrics Markup Language
Structured Modeling Markup Language
Simulation Module Markup Language

SNML
===============
* Social Network Markup Language
* Simple Network Markup Language
Snort Markup Language

SOML
===============
Simple Object Markup Language
Simpleobjectmarkuplanguage
* Sql Object Markup Language
Spacecraft Operations Markup Language

SPML
===============
* Service Provisioning Markup Language
Services Provisioning Markup Language

SRML
===============
* Simulation Reference Markup Language
Srmlpdgsimulationreferencemarkuplanguage
Simple Resource Markup Language

SSML
===============
* Speech Synthesis Markup Language

SUML
===============
* Survey Markup Language

SVML
===============
Stored Value Markup Language
* Smart Video Markup Language
Standard Video Markup Language
Semantic Visualization Markup Language
String Vacuum Markup Language

SWML
===============
* Signwriting Markup Language

TAML
===============
* Testassertionmarkuplanguage
* Test Assertion Markup Language
Text Analysis Markup Language
Tactical Assessment Markup Language
Trust Axiom Markup Language

TBML
===============
* Test Bed Markup Language
Tbml Markup Language
The Broadcast Markup Language

TCML
===============
* Test Case Markup Language
* Traffic Camera Markup Language
Trade Control Markup Language
Test Configuration Markup Language

TDML
===============
* Timing Diagram Markup Language

TEML
===============
The Markup Language
* Text Markup Language
Term Markup Language

TGML
===============
Tgml Markup Language
Tecumseh Group Markup Language
* Tac Graphics Markup Language
Tor Graphics Markup Language

THML
===============
The Markup Language
Tml Hypertext Markup Language
The Hypertext Markup Language
To Html Markup Language

TIML
===============
T Is Markup Language

TLML
===============
Tight List Markup Language
Tightlist Markup Language
Templatelite Markup Language

TMML
===============
* Tcl Manual Markup Language
* Turing Machine Markup Language
Traffic Model Markup Language

TOML
===============
Telescope Observation Markup Language
Toml Markup Language

TPML
===============
* Test Program Markup Language
* Text Processing Markup Language

TQML
===============
Template Query Markup Language

TRML
===============
Term Markup Language

TSML
===============
Tombstonemarkuplanguage
Tombstone Markup Language
Transition System Markup Language
Tensible Markup Language
Test Suite Markup Language
Theater Scenario Markup Language
Training Samples Markup Language
Time Series Markup Language

TTML
===============
* Timed Text Markup Language
Text Markup Language
Tagged Text Markup Language
To Ttml Markup Language

TUML
===============
Tumblr Markup Language

TVML
===============
Tvml Markup Language
Television Markup Language
Televisual Markup Language

TWML
===============
* Tsunami Warning Markup Language
Twinity Markup Language

TXML
===============
Tation Xml Markup Language
To Xml Markup Language

UBML
===============
Urantia Book Markup Language

UCML
===============
Use Case Markup Language

UDML
===============
* Universal Database Markup Language
Unstructured Data Markup Language

UEML
===============
Ument Markup Language
Universal Exchange Markup Language

UIML
===============
* User Interface Markup Language

UJML
===============
* Ujinn Markup Language

ULML
===============
* User Labor Markup Language

UMML
===============
Uml Markup Language

UNML
===============
Unified Markup Language
Universal Markup Language

UOML
===============
* Unstructured Operation Markup Language
Uniqueobject Markup Language

UPML
===============
* Universal Programming Markup Language
Upml Markup Language
* Universal Phonetic Markup Language

URML
===============
Universal Markup Language

USML
===============
* Uddi Search Markup Language
Universal Search Markup Language

UTML
===============
Urrent Markup Language

UVML
===============
* Universal Voting Markup Language

VAML
===============
* Video Annotation Markup Language

VBML
===============
* Voice Browser Markup Language
Virtual Body Markup Language
Voobly Markup Language

VCML
===============
* Value Chain Markup Language
* Video Caption Markup Language
Vodafone Content Markup Language
Virtual Cluster Markup Language

VDML
===============
* Visual Data Markup Language
Virtual Disk Markup Language

VEML
===============
* Video Event Markup Language
Vent Markup Language
Video Markup Language

VFML
===============
Vodafone Markup Language

VGML
===============
* Vector Graphics Markup Language
Virtual Globe Markup Language

VHML
===============
* Virtual Human Markup Language

VIML
===============
Voice Interface Markup Language
* Virtual Instruments Markup Language

VJML
===============
Video Jockey Markup Language
* Visual Jockey Markup Language

VLML
===============
View Layout Markup Language
Video Layout Markup Language
Virtual Laboratory Markup Language
Virtual Lego Markup Language
Vocabulary List Markup Language

VMML
===============
Virtual Musician Markup Language
Virtual Music Markup Language
Vehicle Messaging Markup Language

VOML
===============
* Visual Object Markup Language
Volunteer Opportunity Markup Language

VPML
===============
Virtual Pet Markup Language
Variant Part Markup Language
Virtual Plastic Markup Language
Visual Pipeline Markup Language

VRML
===============
* Virtual Reality Markup Language

VTML
===============
Visual Tool Markup Language
* Visual Tools Markup Language
Voicetext Markup Language

VWML
===============
* Virtual World Markup Language
Vw Markup Language

VZML
===============
Vz Markup Language

WAML
===============
* Web Application Markup Language
Waml Markup Language
Wave Markup Language

WBML
===============
Webbase Markup Language
Web Browser Markup Language
* Web Markup Language
Web Base Markup Language

WCML
===============
* Webcomposition Markup Language
Web Composition Markup Language

WDML
===============
* Weapons Data Markup Language
* Wireless Device Markup Language

WEML
===============
* Web Engine Markup Language
Webengine Markup Language

WFML
===============
* Windows Forms Markup Language

WGML
===============
* Wheresgeorge Markup Language
Weather Geography Markup Language

WHML
===============
Writing Hydrological Markup Language

WIML
===============
Wiki Markup Language
Wireless Markup Language

WKML
===============
* Wiki Markup Language
Writing Keyhole Markup Language

WLML
===============
* Wireless Markup Language
Wml Markup Language

WMML
===============
* Web Media Markup Language
Washing Machine Markup Language

WNML
===============
Wetlands Network Markup Language

WOML
===============
World Outline Markup Language
Water Observation Markup Language
Water Observations Markup Language

WPML
===============
* Web Page Markup Language
Web Publishers Markup Language

WQML
===============
* Webquest Markup Language

WSML
===============
Website Markup Language
* Web Services Markup Language
Web Server Markup Language

WVML
===============
Webview Markup Language

WWML
===============
* Worldwind Markup Language
World Wind Markup Language
Worldwind Worldwind Markup Language

XAML
===============
* Xtensible Application Markup Language
Xaml Markup Language

XBML
===============
* Xtensible Markup Language

XEML
===============
* Xtensible Markup Language

XFML
===============
Xml Filtering Markup Language
Xml Filter Markup Language

XHML
===============
* Xtensible Hypertext Markup Language
Xhtml Markup Language

XIML
===============
Xtensible Interactive Markup Language
* Xtensible Interface Markup Language

XLML
===============
* Xtensible Markup Language
* Xml Markup Language

XMML
===============
* Xml Markup Language

XNML
===============
* Xtensible Markup Language

XPML
===============
* Xtreme Programming Markup Language
* Xpp Markup Language
Xtensible Programming Markup Language
Xtended Policy Markup Language
Xpml Markup Language

XQML
===============
Xtensible Query Markup Language
Xqueeze Markup Language

XRML
===============
* Xtensible Rights Markup Language
Xtensible Rule Markup Language

XSML
===============
* Xtensible Markup Language

XTML
===============
* Xt Markup Language
Xhtml Markup Language

XVML
===============
Xtended Validation Markup Language
Xtensible Vizbuilder Markup Language

YAML
===============
Yet Another Markup Language
Yamlaintmarkuplanguage
Yaml Aint Markup Language
Yaml Markup Language

YDML
===============
Y Different Markup Language

YEML
===============
Ypertext Markup Language

YFML
===============
* Your Favorite Markup Language

YHML
===============
Yhole Markup Language

YIML
===============
Yapanda Intelligent Markup Language
Yaml Is Markup Language
Yiml Isa Markup Language
Yapanda Intelligence Markup Language

YKML
===============
Y Keyhole Markup Language

YMML
===============
Yourmom Markup Language

YOML
===============
* Your Own Markup Language
Y Own Markup Language

YPML
===============
Yellow Pages Markup Language

YTML
===============
Yper Text Markup Language
* Ypertext Markup Language

ZCML
===============
* Zope Configuration Markup Language

ZGML
===============
Zed Generalized Markup Language

ZIML
===============
Zooming Interface Markup Language
Zoomable Interface Markup Language

ZKML
===============
Zk Markup Language

ZPML
===============
Zensis Portable Markup Language

ZSML
===============
Zeroboard Skin Markup Language
Zerobod Skin Markup Language
</code></pre>

<p>Savvy ( and by now fatigued ) readers will notice that there are <code>__ML</code> sets that <strong>did not appear in the above list</strong>.  These are the variations that are still available.  They are&#8230;</p>

<h2>None of the markups</h2>

<pre><code>AJML
AQML
AUML
AWML
AXML
AYML
BFML
BJML
BOML
BQML
BTML
BXML
BYML
BZML
CCML
CJML
CKML
CUML
CYML
CZML
DYML
EUML
EYML
EZML
FIML
FJML
FKML
FNML
FUML
FVML
FWML
FYML
FZML
GBML
GJML
GKML
GTML
GXML
GZML
HBML
HCML
HDML
HFML
HGML
HJML
HNML
HOML
HVML
HZML
IJML
IYML
IZML
JFML
JIML
JJML
JKML
JLML
JNML
JOML
JRML
JTML
JVML
JXML
JYML
KAML
KCML
KEML
KIML
KJML
KKML
KNML
KTML
KUML
KVML
KXML
KYML
KZML
LFML
LHML
LLML
LQML
LTML
LUML
LXML
LZML
MJML
MMML
MTML
MUML
MXML
MYML
NFML
NGML
NJML
NYML
NZML
OJML
OKML
OUML
OYML
OZML
PJML
PUML
PXML
PZML
QAML
QBML
QEML
QGML
QHML
QIML
QLML
QNML
QOML
QQML
QSML
QTML
QUML
QVML
QWML
QYML
QZML
RHML
RJML
RUML
RXML
RYML
RZML
SJML
SQML
STML
SXML
SYML
SZML
TFML
TJML
TKML
TNML
TYML
TZML
UAML
UFML
UGML
UHML
UKML
UQML
UUML
UWML
UXML
UYML
UZML
VKML
VNML
VQML
VSML
VUML
VVML
VXML
VYML
WJML
WRML
WTML
WUML
WXML
WYML
WZML
XCML
XDML
XGML
XJML
XKML
XOML
XUML
XWML
XXML
XYML
XZML
YBML
YCML
YGML
YJML
YLML
YNML
YQML
YRML
YSML
YUML
YVML
YWML
YXML
YYML
YZML
ZAML
ZBML
ZDML
ZEML
ZFML
ZHML
ZJML
ZLML
ZMML
ZNML
ZOML
ZQML
ZRML
ZTML
ZUML
ZVML
ZWML
ZXML
ZYML
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dumbwaiter v0.0.1]]></title>
    <link href="http://danielmendel.github.com/blog/2013/03/04/dumbwaiter-v0-dot-0-1/"/>
    <updated>2013-03-04T12:27:00-05:00</updated>
    <id>http://danielmendel.github.com/blog/2013/03/04/dumbwaiter-v0-dot-0-1</id>
    <content type="html"><![CDATA[<p>I&#8217;ve recently found myself doing a lot of experiments in HTML that are only composed of client-side code.  The trick is that to properly test them, you have to serve the pages through a host of some kind &#8211; anything that you open directly using the <code>file:</code> protocol runs into security measures that prevent the page access to certain types of assets and requests.</p>

<p>In the past I&#8217;ve either launched Chrome with <code>--allow-file-access-from-files</code> and used the <code>file:</code> protocol, or served the files through a local Apache or Nginx server.  Since I&#8217;m lazy, I decided these options were too much work and that instead I wanted a simple CLI to spin up small servers for any local directory.</p>

<p>This morning I wrote <a href="https://github.com/danielmendel/dumbwaiter"><code>dumbwaiter</code></a>, a <em>tiny</em>, 11 line <code>npm</code> module for doing just that by using the <code>connect.static</code> middleware.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">#</span><span class="o">!</span><span class="err">/usr/bin/env node</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">connect</span>  <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;connect&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">path</span>    <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">dirPath</span>  <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span> <span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">PORT</span>     <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">||</span> <span class="mi">3000</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">server</span>   <span class="o">=</span> <span class="nx">connect</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nx">server</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span> <span class="nx">connect</span><span class="p">.</span><span class="kr">static</span><span class="p">(</span> <span class="nx">dirPath</span> <span class="p">)</span> <span class="p">)</span>
</span><span class='line'><span class="nx">server</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span> <span class="nx">PORT</span> <span class="p">)</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;serving &#39;</span> <span class="o">+</span> <span class="nx">dirPath</span> <span class="o">+</span> <span class="s1">&#39; on port &#39;</span> <span class="o">+</span> <span class="nx">PORT</span> <span class="o">+</span> <span class="s1">&#39; ...&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Install with <code>npm install -g dumbwaiter</code>, then run as <code>dumbwaiter [rootDir] [port]</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New compound animations in glitz.js]]></title>
    <link href="http://danielmendel.github.com/blog/2013/02/25/new-compound-animations-in-glitz-dot-js/"/>
    <updated>2013-02-25T17:46:00-05:00</updated>
    <id>http://danielmendel.github.com/blog/2013/02/25/new-compound-animations-in-glitz-dot-js</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/danielmendel/glitz.js"><code>glitz.js</code></a> support for defining animations is pretty flexible, but it is designed for fairly simple interactive behaviors and has, until now, lacked a good method for building complex animations from component parts.  I&#8217;ve wanted to add a good API for to do this for a while and this week I finally got a chance to do so, while pairing with <a href="https://github.com/zachallaun">Zach Allaun</a> at <a href="http://www.hackerschool.com">Hacker School</a>.  I&#8217;m really excited about what we came up.  First, I&#8217;ll explain the state of affairs before our changes.</p>

<!-- more -->


<h2>Good, but not great</h2>

<p>The animation API that glitz implements is very straightforward, if you&#8217;ve ever animated <code>DOM</code> elements with <code>jQuery.animate</code> then the syntax should be pretty familiar.  All of the following animations are equivalent.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// transform ( duration defaults to 250ms )</span>
</span><span class='line'><span class="nx">box</span><span class="p">.</span><span class="nx">animate</span><span class="p">({</span> <span class="nx">x</span><span class="o">:</span> <span class="mi">100</span> <span class="p">});</span>
</span><span class='line'><span class="c1">// transform, duration</span>
</span><span class='line'><span class="nx">box</span><span class="p">.</span><span class="nx">animate</span><span class="p">({</span> <span class="nx">x</span><span class="o">:</span> <span class="mi">100</span> <span class="p">},</span> <span class="mi">5000</span> <span class="p">);</span>
</span><span class='line'><span class="c1">// transform, callback</span>
</span><span class='line'><span class="nx">box</span><span class="p">.</span><span class="nx">animate</span><span class="p">({</span> <span class="nx">x</span><span class="o">:</span> <span class="mi">100</span> <span class="p">},</span> <span class="kd">function</span><span class="p">(){</span> <span class="p">...</span> <span class="p">});</span>
</span><span class='line'><span class="c1">// transform, duration, callback</span>
</span><span class='line'><span class="nx">box</span><span class="p">.</span><span class="nx">animate</span><span class="p">({</span> <span class="nx">x</span><span class="o">:</span> <span class="mi">100</span> <span class="p">},</span> <span class="mi">5000</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span> <span class="p">...</span> <span class="p">});</span>
</span><span class='line'><span class="c1">// transform, options</span>
</span><span class='line'><span class="nx">box</span><span class="p">.</span><span class="nx">animate</span><span class="p">({</span> <span class="nx">x</span><span class="o">:</span> <span class="mi">100</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">duration</span><span class="o">:</span> <span class="mi">5000</span><span class="p">,</span> <span class="nx">done</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span> <span class="p">...</span> <span class="p">}});</span>
</span></code></pre></td></tr></table></div></figure>


<p>If <code>animate</code> is invoked on an object while that object is still performing a previous animation, the current animation is immediately canceled and the new one begins.  This is the default behavior because interactivity requires an immediate response from objects.  If you want to build a complex series of animations, you can do so using nested callbacks.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// move left, then down, then fade the color</span>
</span><span class='line'><span class="nx">box</span><span class="p">.</span><span class="nx">animate</span><span class="p">({</span> <span class="nx">x</span><span class="o">:</span> <span class="mi">100</span> <span class="p">},</span> <span class="mi">5000</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">box</span><span class="p">.</span><span class="nx">animate</span><span class="p">({</span> <span class="nx">y</span><span class="o">:</span> <span class="mi">100</span> <span class="p">},</span> <span class="mi">5000</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="nx">box</span><span class="p">.</span><span class="nx">animate</span><span class="p">({</span> <span class="nx">strokeColor</span><span class="o">:</span> <span class="s1">&#39;#f00&#39;</span> <span class="p">},</span> <span class="mi">5000</span> <span class="p">);</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can imagine, this gets to be pretty ugly pretty quickly if you want even fairly simple sets of actions.  Futhermore, it&#8217;s difficult to store animation routines and run them more dynamically &#8211; users would have to implement their own methodology which would, at the most simple, look something like this&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">anims</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">left</span><span class="o">:</span>    <span class="p">{</span> <span class="nx">x</span><span class="o">:</span> <span class="mi">100</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">down</span><span class="o">:</span>    <span class="p">{</span> <span class="nx">y</span><span class="o">:</span> <span class="mi">100</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">turnRed</span><span class="o">:</span> <span class="p">{</span> <span class="nx">strokeColor</span><span class="o">:</span> <span class="s1">&#39;#f00&#39;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">run</span><span class="p">(</span> <span class="nx">series</span> <span class="p">){</span>
</span><span class='line'>    <span class="nx">box</span><span class="p">.</span><span class="nx">animate</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span> <span class="nx">box</span><span class="p">,</span> <span class="nx">anims</span><span class="p">[</span><span class="nx">series</span><span class="p">.</span><span class="nx">shift</span><span class="p">()],</span> <span class="kd">function</span><span class="p">(){</span> <span class="nx">run</span><span class="p">(</span> <span class="nx">series</span> <span class="p">)</span> <span class="p">}</span> <span class="p">)</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">runSeries</span><span class="p">([</span> <span class="s1">&#39;left&#39;</span><span class="p">,</span> <span class="s1">&#39;down&#39;</span><span class="p">,</span> <span class="s1">&#39;turnRed&#39;</span> <span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Gross &#8211; we figured we could definitely do better than that.</p>

<h2>Enter Compositions</h2>

<p>First we thought it would be good if you could compose a series of animations like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// move left, then down, then fade the color</span>
</span><span class='line'><span class="nx">box</span><span class="p">.</span><span class="nx">animate</span><span class="p">([{</span> <span class="nx">x</span><span class="o">:</span> <span class="mi">100</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">y</span><span class="o">:</span> <span class="mi">100</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">strokeColor</span><span class="o">:</span> <span class="s1">&#39;#f00&#39;</span> <span class="p">}]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is already clearly better than the alternative, but then we decided we had to include support to create <em>parallel</em> animations as well, something that was not possible in any way shape or form before.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// move left and down simultaniously but with different end times</span>
</span><span class='line'><span class="nx">box</span><span class="p">.</span><span class="nx">animate</span><span class="p">([[{</span> <span class="nx">x</span><span class="o">:</span> <span class="mi">100</span><span class="p">,</span> <span class="nx">duration</span><span class="o">:</span> <span class="mi">500</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">y</span><span class="o">:</span> <span class="mi">50</span><span class="p">,</span> <span class="nx">duration</span><span class="o">:</span> <span class="mi">1000</span> <span class="p">}]]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>By combining these you can compose a series of parallel animations:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">box</span><span class="p">.</span><span class="nx">animate</span><span class="p">([[{</span> <span class="nx">x</span><span class="o">:</span> <span class="mi">100</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">y</span><span class="o">:</span> <span class="mi">100</span> <span class="p">}],[{</span> <span class="nx">x</span><span class="o">:</span> <span class="mi">0</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">strokeColor</span><span class="o">:</span> <span class="s1">&#39;#f00&#39;</span> <span class="p">}]]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or parallel series:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">box</span><span class="p">.</span><span class="nx">animate</span><span class="p">([[[{</span> <span class="nx">x</span><span class="o">:</span> <span class="mi">100</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">y</span><span class="o">:</span> <span class="mi">100</span> <span class="p">}],[{</span> <span class="nx">strokeColor</span><span class="o">:</span> <span class="s1">&#39;#f00&#39;</span><span class="p">},</span> <span class="p">{</span> <span class="nx">y</span><span class="o">:</span> <span class="mi">0</span> <span class="p">}]]]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or any combination thereof:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">box</span><span class="p">.</span><span class="nx">animate</span><span class="p">([{</span> <span class="nx">x</span><span class="o">:</span> <span class="mi">100</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">y</span><span class="o">:</span> <span class="mi">100</span> <span class="p">},</span> <span class="p">[{</span> <span class="nx">y</span><span class="o">:</span> <span class="mi">0</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">strokeColor</span><span class="o">:</span> <span class="s1">&#39;#f00&#39;</span> <span class="p">},</span> <span class="p">[{</span> <span class="nx">x</span><span class="o">:</span> <span class="mi">0</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">strokeColor</span><span class="o">:</span> <span class="s1">&#39;#0f0&#39;</span> <span class="p">}]]]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s it! You can <a href="https://github.com/danielmendel/glitz.js">fork glitz.js</a> and try them out for yourself.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cool stuff I learned doing code review]]></title>
    <link href="http://danielmendel.github.com/blog/2013/02/20/cool-stuff-i-learned-doing-code-review/"/>
    <updated>2013-02-20T16:27:00-05:00</updated>
    <id>http://danielmendel.github.com/blog/2013/02/20/cool-stuff-i-learned-doing-code-review</id>
    <content type="html"><![CDATA[<p>So a major staple of <a href="http://www.hackerschool.com">Hacker School</a> is doing ( and getting ) lots and lots of code reviews.  I think this is <em>awesome</em>, and I&#8217;ve been working on a lot of reviewing this week.  The most rewarding thing about reviewing a language you are comfortable in is that you learn all kinds of things you might never come across when left to your own ingrained design patterns.  This is a short round up of some neat things I learned about <code>javascript</code> this week.</p>

<!-- more -->


<h2>Not just syntax!</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">foo</span><span class="p">(){</span> <span class="k">return</span> <span class="kc">true</span> <span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">bar</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span> <span class="k">return</span> <span class="kc">true</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>I had always assumed that the only difference between these styles of defining a function was syntactic &#8211; however, that&#8217;s not true! There is actually a crucial difference at runtime.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">foo</span><span class="p">();</span>  <span class="c1">// true</span>
</span><span class='line'><span class="nx">bar</span><span class="p">();</span>  <span class="c1">// ERROR! bar is not defined.</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">foo</span><span class="p">(){</span> <span class="k">return</span> <span class="kc">true</span> <span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">bar</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span> <span class="k">return</span> <span class="kc">true</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is one of those things that now I know it, seems obvious.  The essential difference is that javascript loads all of the function definitions in a chunk of code before it begins execution.  When it encounters <code>foo()</code> it already has a reference to the function definition below.  However, <strong>the <code>bar</code> function is actually <em>anonymous</em> until the line assigning it to <code>bar</code> is executed</strong> &#8211; because this is <em>after</em> the line that tries to run <code>bar()</code> the call fails.</p>

<p>&#8211; with <a href="https://github.com/alliejones">Allie Jones</a></p>

<h2>Do While</h2>

<p>For some reason I have simply never really used javascript&#8217;s <code>do {} while ()</code> loop.  I use <code>while(){}</code> style loops all the time and somehow in the back of my mind must have foolishly assumed that they were all I&#8217;d ever need for a <code>while</code> ( pun! ).  I was wrong, there are cases where this syntax is super useful, consider this essential difference between the two.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">do</span><span class="p">{</span> <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="p">}</span><span class="k">while</span><span class="p">(</span> <span class="kc">false</span> <span class="p">);</span>
</span><span class='line'><span class="k">while</span><span class="p">(</span> <span class="kc">false</span> <span class="p">){</span> <span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">a</span><span class="p">;</span> <span class="c1">// 1</span>
</span><span class='line'><span class="nx">b</span><span class="p">;</span> <span class="c1">// undefined</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><code>do</code> always fires at least once.</strong>  This makes it perfect for things like collision prevention without having to init a variable separately.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// assume uniqueRandoms === { ... };</span>
</span><span class='line'><span class="k">do</span><span class="p">{</span> <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="p">}</span> <span class="k">while</span><span class="p">(</span> <span class="nx">uniqueRandoms</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>&#8211; with <a href="https://github.com/wija">Bill Abresch</a></p>

<h2>Applied Math</h2>

<p>Somehow I had never considered the pure simple genius of this strategy.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">124</span><span class="p">,</span> <span class="mi">240</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">2</span> <span class="p">];</span>
</span><span class='line'><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span> <span class="nb">Math</span><span class="p">,</span> <span class="nx">arr</span> <span class="p">);</span>  <span class="c1">// 240</span>
</span></code></pre></td></tr></table></div></figure>


<p>&#8211; with <a href="https://github.com/greggreggreg7">Greg Altman</a> and <a href="https://github.com/patrickmestabrook">Patrick Estabrook</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Subclassing Javascript Arrays]]></title>
    <link href="http://danielmendel.github.com/blog/2013/02/20/subclassing-javascript-arrays/"/>
    <updated>2013-02-20T03:44:00-05:00</updated>
    <id>http://danielmendel.github.com/blog/2013/02/20/subclassing-javascript-arrays</id>
    <content type="html"><![CDATA[<p>When I started working on the animation framework <a href="https://github.com/danielmendel/glitz.js"><code>glitz.js</code></a>, I wanted an easy syntax for expressing and traversing a nested tree of <code>Renderable</code> objects.  I thought, &#8221;<em>Why not implement it as an array?</em>&#8221; Since the scene graph would need to be iterated over very quickly during the render loop, it would be great to just represent the whole thing as a multi-dimentional array &#8211; <strong>essentially a subclass of array</strong> that had some additional properties and methods like <code>render</code> and <code>animate</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">box1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Box</span><span class="p">({</span> <span class="nx">x</span><span class="o">:</span> <span class="mi">100</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="mi">100</span> <span class="p">});</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">box2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Box</span><span class="p">({</span> <span class="nx">x</span><span class="o">:</span> <span class="mi">110</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="mi">110</span> <span class="p">});</span>
</span><span class='line'><span class="nx">box1</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span> <span class="nx">box2</span> <span class="p">);</span>
</span><span class='line'><span class="nx">box1</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>       <span class="c1">// box2</span>
</span><span class='line'><span class="nx">box1</span><span class="p">.</span><span class="nx">render</span><span class="p">();</span> <span class="c1">// draws a box</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<h2><a id="naive"></a> 1. Ah, Naïveté</h2>

<p>First I tried a simple approach.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">arrLike</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">length</span><span class="o">:</span> <span class="mi">0</span> <span class="p">};</span>
</span><span class='line'><span class="nx">arrLike</span><span class="p">.</span><span class="nx">push</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">push</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span> <span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">arrLike</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">arrLike</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>   <span class="c1">// &#39;foo&#39;</span>
</span><span class='line'><span class="nx">arrLike</span><span class="p">.</span><span class="nx">length</span> <span class="c1">// 1</span>
</span></code></pre></td></tr></table></div></figure>


<p>Basically, you can invoke methods from the native <code>Array.prototype</code> on any object with a length and get array-like results.  This works because <strong>javascript objects allow numerical keys</strong>, so essentially what we end up with is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">arrLike</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="mi">0</span><span class="o">:</span> <span class="s1">&#39;foo&#39;</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">length</span><span class="o">:</span> <span class="mi">1</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>At first glance (eg, not in <code>IE&lt;8</code>), this seems to work great. However, <strong>there are hidden dragons</strong> &#8211; let&#8217;s compare some further manipulations to a native array.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>         <span class="c1">// &#39;foo&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span>     <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="nx">arrLike</span><span class="p">.</span><span class="nx">length</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="nx">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>         <span class="c1">// undefined</span>
</span><span class='line'><span class="nx">arrLike</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>      <span class="c1">// &#39;foo&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">arr</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span>     <span class="o">=</span> <span class="s1">&#39;bar&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">arrLike</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;bar&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>     <span class="c1">// 11</span>
</span><span class='line'><span class="nx">arrLike</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="c1">// 0</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Uh-oh</strong>, there are obviously some drawbacks here.  First, <strong>setting the length property of a proper <code>Array</code> to <code>0</code>  clears the array</strong>.  In fact, this is usually the <a href="http://jsperf.com/clearing-arrays-without-reassigning-them">fastest method of clearing arrays</a>.  Second, when you assign a value to an array index that is <code>&gt; length</code>, then the native array will expand to contain it.  In short, <strong>native arrays have a magical <code>length</code></strong> that we miss out on entirely with the naive approach.  As usual, more information can be found in the <a href="http://bclary.com/2004/11/07/#a-15.4">relevant section of the EMCAscript spec</a>.</p>

<h2><a id="extension"></a>2. Direct extension</h2>

<p>Okay, so my naive approach is dead in the water &#8211; after grieving, I decided to try direct extension.  This is exactly what it sounds like: creating <code>Array</code> instances and copying a bunch of methods &amp; properties on to them directly.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">extension</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">x</span><span class="o">:</span> <span class="mi">0</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="mi">0</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span> <span class="p">...</span> <span class="p">}</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">Box</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">instanceProps</span> <span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[],</span> <span class="nx">k</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span> <span class="nx">k</span> <span class="k">in</span> <span class="nx">extension</span> <span class="p">){</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span> <span class="nx">extension</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">k</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>          <span class="nx">arr</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span> <span class="o">=</span> <span class="nx">extension</span><span class="p">[</span><span class="nx">k</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span> <span class="nx">k</span> <span class="k">in</span> <span class="nx">instanceProps</span> <span class="p">){</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span> <span class="nx">instanceProps</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">k</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>          <span class="nx">arr</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span> <span class="o">=</span> <span class="nx">instanceProps</span><span class="p">[</span><span class="nx">k</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">arr</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>The outcome here is exactly what we want &#8211; a native array with some extra methods and properties.  There&#8217;s just one problem, <strong>compared to creating raw instances of a native array, it is <em>really, really slow</em></strong> &#8211; for example, in Firefox 17.0, <a href="http://jsperf.com/subclassing-arrays-direct-extension-variations/3">it is 26 x slower</a> when adding just two properties.</p>

<p>Now obviously there are a lot of use cases where this performance hit isn&#8217;t particularly painful &#8211; even at 1/26th speed you can still create many thousands of arrays per second, and probably most uses for <a href="https://github.com/danielmendel/glitz.js"><code>glitz.js</code></a> wouldn&#8217;t suffer too badly here.  But, <strong>this is in an animation framework</strong> and if we can speed any part of it up by that much, it increases the domain it can operate in by a fair margin.  This brings us to&#8230;</p>

<h2><a id="subclassing"></a>3. Having your cake and eating it inside of an iframe</h2>

<p>Wouldn&#8217;t it be the best if we could just subclass <code>Array</code> and add some methods to the <code>prototype</code>?  Of course this would contravine several of the golden rules of javascript best practices, first and foremost being <a href="http://www.nczonline.net/blog/2010/03/02/maintainable-javascript-dont-modify-objects-you-down-own/">don&#8217;t modify objects you don&#8217;t own</a>.  Another issue with this is that each user-defined <code>Renderable</code> subclass requires a different set of extentions to the <code>prototype</code> and <a href="http://perfectionkills.com/how-ecmascript-5-still-does-not-allow-to-subclass-an-array/#andrea_giammarchi_solution">trying to use prototypical inheritance</a> runs into the same issues as the <a href="#naive">naive solution</a>.</p>

<p>Enter Dean Edwards <a href="http://dean.edwards.name/weblog/2006/11/hooray/">iframe sandbox solution</a> &#8211; the idea here is that you create a hidden <code>&lt;iframe&gt;</code> and steal the <code>Array</code> object from the <code>iframe</code> execution context.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">iframe</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;iframe&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">iframe</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">display</span> <span class="o">=</span> <span class="s2">&quot;none&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">iframe</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">frames</span><span class="p">[</span><span class="nx">frames</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">].</span><span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span>
</span><span class='line'>      <span class="s2">&quot;&lt;script&gt;parent.myArray = Array;&lt;/script&gt;&quot;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">myArray</span> <span class="o">===</span> <span class="nb">Array</span> <span class="c1">// false</span>
</span><span class='line'><span class="nx">myArray</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="s1">&#39;bar&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">arr</span>   <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">myarr</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">myArray</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">myarr</span><span class="p">.</span><span class="nx">foo</span><span class="p">;</span>        <span class="c1">// &#39;bar&#39;</span>
</span><span class='line'><span class="nx">arr</span><span class="p">.</span><span class="nx">foo</span><span class="p">;</span>          <span class="c1">// undefined</span>
</span></code></pre></td></tr></table></div></figure>


<p>This works because browsers sandbox the javascript execution environments so that each frame owns a unique set of native objects.  Here we simply &#8220;borrow&#8221; ( read: steal ) one from a new iframe and send it back to our execution environment.  As you might imagine, this technique comes with some caveats:</p>

<ul>
<li>Keep that iframe around and attached to the DOM &#8211; it still technically owns our array.</li>
<li>This approach doesn&#8217;t work in non-browser environments.</li>
</ul>


<p>Number 2 is not a problem this purpose as <a href="https://github.com/danielmendel/glitz.js"><code>glitz.js</code></a> is already tied to the browser in other ways.  Additionally, if it were ever to be ported to a server context this same methodology could be recreated with a slightly different technique, such as borrowing <code>Array</code> from a <code>VM</code> in <code>node.js</code>.</p>

<p>Ultimately this is the technique I used for a major update to the way that <a href="https://github.com/danielmendel/glitz.js"><code>glitz.js</code></a> handles array subclassing under the hood in commit <a href="https://github.com/danielmendel/glitz.js/commit/5c5d183c7cbcdd26d669b40270745c5fddb9b539#L3R656"><code>5c5d183</code></a> and also ended up putting together <a href="https://github.com/danielmendel/gimme"><code>gimme</code></a> a tiny stand alone library to automate the process of &#8220;borrowing&#8221; natives.</p>

<p>For the most comprehensive overview of the techniques for subclassing arrays in javascript, read <a href="http://perfectionkills.com/how-ecmascript-5-still-does-not-allow-to-subclass-an-array">How ECMAscript 5 still does not allow to subclass an array</a> [sic].</p>
]]></content>
  </entry>
  
</feed>
